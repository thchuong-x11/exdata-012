install.packages("mgcv")
install.packages("manipulate")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
install.packages("manipulate")
library("swirl")
swirl()
num_vect <- c(0.5,55,-10,6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "thchuong")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf =
| NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
! 5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints <= 0)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
View(flags)
View(flag_colors)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist,xlab = "Speed")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab="Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob=c(0.3,0.7))
sample(c(0,1), 100, prob=c(0.3,0.7), replace=TRUE)
flips <-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd=25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(datasets)
data(iris)
?iris
colnames(iris)
mean(iris[iris$Species="virginica",1])
mean(iris[iris$Species=="virginica",1])
?apply
apply(iris[,1:4],2, mean)
library(datasets)
data(mtcars)
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
t <- tapply(mtcars$mpg, mtcars$cyl, mean)
abs(t[,1] - t[,2])
abs(t[,1] - t[,3])
abs(t[1,1] - t[1,3])
abs(t[1,] - t[3,])
t[1,1]
debug(ls)
ls
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(e)
x
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?lm
?system.time
system.time()
?qpois
?dpois
install.packages("manipulate")
install.packages(c("cluster", "codetools", "manipulate", "Matrix"))
install.packages("KernSmooth")
library("Kernsmooth")
library(KernSmooth)
install.packages(c("boot", "class", "foreign", "manipulate", "MASS", "nlme", "nnet", "rpart", "spatial"))
install.packages(c("lattice", "manipulate", "survival"))
library("ggplot2")
# read treated data
data <- read.csv("data.txt",na.strings="?",sep=";")
# parse date + time string to DateTime type in R
x <- paste(data[,1], data[,2])
data[,2] <- x
data[,1] <- as.Date(data[,1], format("%d/%m/%Y"))
setwd("~/Desktop/exdata-012/project-1")
library("ggplot2")
# read treated data
data <- read.csv("data.txt",na.strings="?",sep=";")
# parse date + time string to DateTime type in R
x <- paste(data[,1], data[,2])
data[,2] <- x
data[,1] <- as.Date(data[,1], format("%d/%m/%Y"))
str(data)
ylab <- "Global Active Power (kilowatts)"
ae <- aes(x=Time, y=Global_active_power, group=Date)
ggplot(data=data, ae) +
geom_path() +
ylab(ylab) +
xlab(NULL)
y <- as.Date(x)
y <- as.POSIXct.date(x)
y <- as.POSIXct(x)
y <- as.POSIXct(x)
y <- as.character.Date(x)
y <- as.Date.character(x)
y <- as.Double(strptime(x))
y <- as.double(strptime(x))
y <- as.double(strptime(x, format("%d/%m%Y %H:%M:%S")))
x <- paste(data[,1], data[,2])
y <- strptime(x, format("%d/%m%Y %H:%M:%S"))
data <- read.csv("data.txt",na.strings="?",sep=";")
# parse date + time string to DateTime type in R
x <- paste(data[,1], data[,2])
data[,2] <- x
data[,1] <- as.Date(data[,1], format("%d/%m/%Y"))
str(data)
y <- strptime(x, format("%d/%m%Y %H:%M:%S"))
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))
y <- as.vector(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- as.vector(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- as.vector(strftime(x, format("%d/%m/%Y %H:%M:%S")))
y <- strftime(x, format("%d/%m/%Y %H:%M:%S"))
y <- strftime(x, format("%d/%m/%Y %H:%M:%S"), usetz=TRUE)
y <- strftime(x, format("%d/%m/%Y %H:%M:%S"))
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))[1]
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))[]
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))
y <- strftime(x, format("%d/%m/%Y %H:%M:%S"))
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))
y <- as.vector(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- as.data.frame(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- as.array(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- as.array(strptime(x, format("%d/%m/%Y %H:%M:%S")))
type(x)
typeof(x)
typeof(x[1])
mode(x[1])
mode(x)
str(x)
y <- as.v(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- as.character(strptime(x, format("%d/%m/%Y %H:%M:%S")))
ylab <- "Global Active Power (kilowatts)"
ae <- aes(x=Time, y=Global_active_power, group=Date)
ggplot(data=data, ae) +
geom_path() +
ylab(ylab) + ylim("Thu", "Fri", "Sam")
ggplot(data=data, ae) +
geom_path() +
ylab(ylab) + xlim("Thu", "Fri", "Sam") +
xlab(NULL)
ae <- aes(x=Time, y=Global_active_power)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) + xlim("Thu", "Fri", "Sam") +
xlab(NULL)
ae <- aes(x=Time, y=Global_active_power)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) +
xlab(NULL)
ae <- aes(x=Date, y=Global_active_power)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) +
xlab(NULL)
ae <- aes(x=Time, y=Global_active_power)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) +
xlab(NULL)
coord_cartesian(xlim=c("Fri","Sat"))
ae <- aes(x=Time, y=Global_active_power)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) +
coord_cartesian(xlim=c("Fri","Sat"))
xlab(NULL)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) +
coord_fixed(xlim=c("Fri","Sat"))
xlab(NULL)
ggplot(data=data, ae) +
geom_path(aes(group=Date)) +
ylab(ylab) +
scale_x_datetime(breaks = date_breaks("1 day") +
xlab(NULL)
NULL
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_datetime(breaks = date_breaks("1 day") +
xlab(NULL)
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_datetime(breaks = date_breaks("1 day")) +
xlab(NULL)
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_datetime(breaks = date_breaks("1 day")) +
xlab(NULL)
library("scale")
install.packages("scales")
library("scales")
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_datetime(breaks = date_breaks("1 day")) +
xlab(NULL)
y <- strctime(x, format("%d/%m/%Y %H:%M:%S"))
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))
z <- as.POSIXct(x)
z <- as.POSIXct(x,tz = "GMT")
z <- as.POSIXct(x,tz = "GMT",origin = "1/2/2007")
z <- as.POSIXct(x,origin = "2007-02-01")
z <- as.POSIXct(x[1],origin = "2007-02-01")
z <- as.POSIXct(x[1],origin = "2007-02-01")
y <- as.POSIXct(strptime(x, format("%d/%m/%Y %H:%M:%S")))
y <- strptime(x, format("%d/%m/%Y %H:%M:%S"))
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_date() +
xlab(NULL)
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(x=Date, group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_date() +
xlab(NULL)
ggplot(data=data, aes(x=Time, y=Global_active_power)) +
geom_path(aes(group=Date)) +
ylab("Global Active Power (kilowatts)") +
scale_x_date() +
xlab(NULL)
